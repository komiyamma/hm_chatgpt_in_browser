@using Microsoft.AspNetCore.Components.Web
@namespace BlazorApp.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="BlazorApp.styles.css" rel="stylesheet" />
 
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
    @RenderBody()

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
    <script src="https://cdn.rawgit.com/mattdiamond/Recorderjs/08e7abd9/dist/recorder.js"></script>
    <script type="text/javascript">


        window.ChatGPTMethods = {

            scrollToEnd: function(textarea) {
                textarea.scrollTop = textarea.scrollHeight;
            },

            startRecording: async (stopButtonClass,audioClass) => {
                
                return await new Promise((success, error) => {

                    navigator.getUserMedia({ audio: true }, (result) =>{
                        let stop = document.querySelector(`.${stopButtonClass}`);

                        let recorder;
                        let context;
                        let audio = document.querySelector(`.${audioClass}`);
                        stop.disabled = false;

                        context = new AudioContext();
                        let mediaStreamSource = context.createMediaStreamSource(result);
                        recorder = new Recorder(mediaStreamSource);
                        recorder.record();

                        stop.onclick = function () {
                            recorder.stop();

                            recorder.exportWAV(function (s) {

                                if (audio)
                                {
                                    audio.src = window.URL.createObjectURL(s);
                                }

                                (new Response(s).arrayBuffer()).then(content => {
                                    const contentNums = new Uint8Array(content);
                                    const contentCodes = new TextDecoder('windows-1252').decode(contentNums);
                                    stop.disabled = true;
                                    success(contentCodes);
                                   
                                });
                            });
                        }
                    }, (e) => {
                        error(e);
                    });
                });
            }
        }
    </script>


</body>
</html>
